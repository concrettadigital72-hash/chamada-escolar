from typing import Optional, Dict, Any
import streamlit as st
import pandas as pd
from datetime import date, datetime
import plotly.express as px
import matplotlib.pyplot as plt
import toml
from pathlib import Path
from .db_utils import carregar_lembretes_aluno, carregar_comportamento_aluno, get_student_history


# Importa√ß√µes de m√≥dulos locais
from .db_utils import (
    get_db_connection,
    carregar_alunos_db,
    carregar_horarios,
    salvar_justificativa_db,
    salvar_chamada_db,
    atualizar_no_banco,
    carregar_todas_faltas,
    classificar_justificativa,
    salvar_lembrete,
    carregar_lembretes_aluno,
    salvar_comportamento,
    carregar_comportamento_aluno,
    # verificar_e_inserir_dados_teste # Removido: esta fun√ß√£o est√° em database_setup.py
)
from .analysis import (
    detectar_padroes_de_falta,
    gerar_grafico_calendario,
    gerar_grafico_top_faltas,
    gerar_ranking_faltas,
    gerar_resumo_estatistico
)
from .reports import gerar_relatorio_excel_completo
# from .sponte_scraper import configurar_driver, extrair_dados_chamada # Removido: sponte_scraper n√£o usado diretamente aqui

def pagina_chamada(xls_horarios: pd.ExcelFile, df_base_alunos: pd.DataFrame, professor_logado: str) -> None:
    st.header("üìÖ Realizar Chamada Di√°ria")
    
    if not isinstance(xls_horarios, pd.ExcelFile) or df_base_alunos.empty:
        st.error("Dados necess√°rios n√£o dispon√≠veis. Verifique o arquivo de hor√°rios ou a base de alunos.")
        return
        
    col1, col2 = st.columns(2)
    with col1:
        abas_disponiveis = [aba for aba in xls_horarios.sheet_names if "Planilha" not in str(aba)]
        dia_selecionado = st.selectbox("Dia da Semana:", abas_disponiveis)
    
    df_dia_raw = pd.read_excel(xls_horarios, sheet_name=dia_selecionado, header=None)
    header_row_index = next(
        (i for i, row in df_dia_raw.iterrows() 
         if row.astype(str).str.lower().str.contains('√†s').any()), 
        -1
    )
    
    if header_row_index == -1:
        st.error("N√£o foi poss√≠vel identificar os hor√°rios na planilha.")
        return
        
    horarios_disponiveis = [h for h in df_dia_raw.iloc[header_row_index] if "√†s" in str(h).lower()]
    
    with col2:
        horario_selecionado = st.selectbox("Hor√°rio:", horarios_disponiveis)
    
    if not horario_selecionado:
        return
        
    st.divider()
    
    header_series = df_dia_raw.iloc[header_row_index]
    col_index = next(
        (i for i, col_name in enumerate(header_series) 
         if str(col_name) == horario_selecionado), 
        -1
    )
    
    if col_index == -1:
        st.error(f"Hor√°rio '{horario_selecionado}' n√£o encontrado.")
        return
        
    lista_alunos_bruta = df_dia_raw.iloc[header_row_index + 1:, col_index].dropna()
    lista_alunos_filtrada = [
        aluno for aluno in lista_alunos_bruta 
        if "PC EM MANUTEN√á√ÉO" not in str(aluno).upper()
    ]
    
    turma_id = f"{dia_selecionado}-{horario_selecionado}"
    if 'chamadas_da_sessao' not in st.session_state:
        st.session_state.chamadas_da_sessao = {}
    
    if turma_id not in st.session_state.chamadas_da_sessao:
        st.session_state.chamadas_da_sessao[turma_id] = {
            aluno: 'Presente' for aluno in sorted(lista_alunos_filtrada)
        }
    
    st.subheader(f"Chamada: {dia_selecionado.title()} - {horario_selecionado}")
    
    if not st.session_state.chamadas_da_sessao[turma_id]:
        st.warning("Nenhum aluno cadastrado para este hor√°rio.")
        return
        
    col_turma1, col_turma2 = st.columns(2)
    alunos = sorted(st.session_state.chamadas_da_sessao[turma_id].keys())
    metade = len(alunos) // 2 + len(alunos) % 2
    
    for i, aluno in enumerate(alunos):
        col = col_turma1 if i < metade else col_turma2
        
        with col:
            status_atual = st.session_state.chamadas_da_sessao[turma_id][aluno]
            novo_status = st.radio(
                f"**{aluno}**",
                options=['Presente', 'Faltou'],
                index=0 if status_atual == 'Presente' else 1,
                key=f"{aluno}_{turma_id}",
                horizontal=True
            )
            st.session_state.chamadas_da_sessao[turma_id][aluno] = novo_status
    
    st.divider()
    
    if st.button("üíæ Salvar Presen√ßas e Faltas", type="primary", use_container_width=True):
        with st.spinner("Salvando registros..."):
            for aluno, status in st.session_state.chamadas_da_sessao[turma_id].items():
                aluno_info = df_base_alunos[df_base_alunos['nome'] == aluno]
                
                if not aluno_info.empty:
                    aluno_id = int(aluno_info.iloc[0]['id'])
                    salvar_chamada_db(
                        aluno_id=aluno_id,
                        data_chamada=date.today(),
                        horario=horario_selecionado,
                        status=status,
                        professor=professor_logado
                    )
                    
                    if status == 'Faltou' and aluno not in st.session_state.ausentes_do_dia:
                        st.session_state.ausentes_do_dia[aluno] = {
                            "ligacao": False,
                            "justificativa": "",
                            "id": aluno_id
                        }
            
            st.success("Chamada salva com sucesso!")
            st.rerun()

def pagina_gestao_individual(df_base_alunos: pd.DataFrame, professor_logado: str):
    """Renderiza a p√°gina completa de gest√£o individual de um aluno."""
    st.header("üîç Gest√£o Individual do Aluno", divider="rainbow")

    if df_base_alunos.empty:
        st.warning("Nenhum aluno carregado para sele√ß√£o.")
        return

    # Mapeia nome do aluno para seu ID
    mapa_alunos = pd.Series(df_base_alunos.id.values, index=df_base_alunos.nome).to_dict()
    
    aluno_selecionado = st.selectbox(
        "Selecione um aluno para ver os detalhes:",
        options=mapa_alunos.keys(),
        index=None,  # Come√ßa sem nenhum aluno selecionado
        placeholder="Digite ou selecione o nome do aluno"
    )

    if aluno_selecionado:
        aluno_id = mapa_alunos[aluno_selecionado]
        st.divider()

        # --- NOVO DASHBOARD DO ALUNO ---
        st.subheader(f"Dashboard de Frequ√™ncia: {aluno_selecionado}")

        # Carrega o hist√≥rico de faltas
        df_historico_faltas = get_student_history(aluno_id)

        if df_historico_faltas.empty:
            st.info("Este aluno n√£o possui registo de faltas. ‚úÖ")
        else:
            # Exibe os cart√µes de resumo (KPIs)
            total_faltas = len(df_historico_faltas)
            faltas_justificadas = df_historico_faltas['justificativa'].notna().sum()
            
            col1, col2 = st.columns(2)
            col1.metric("Total de Faltas", f"{total_faltas} dias")
            col2.metric("Faltas Justificadas", f"{faltas_justificadas} dias")

            # Exibe a tabela com o hist√≥rico detalhado
            st.write("#### Hist√≥rico de Faltas")
            df_display = df_historico_faltas[['data', 'justificativa', 'justificado_por']].copy()
            df_display.rename(columns={
                'data': 'Data da Falta',
                'justificativa': 'Justificativa',
                'justificado_por': 'Registado Por'
            }, inplace=True)
            
            st.dataframe(df_display, use_container_width=True, hide_index=True)

        # --- SE√á√ÉO DE LEMBRETES E COMPORTAMENTO (J√Å EXISTENTE OU PODE ADICIONAR) ---
        st.divider()
        st.subheader("Registos Adicionais")
        
        tab_lembretes, tab_comportamento = st.tabs(["Lembretes", "Comportamento"])

        with tab_lembretes:
            st.write("###### Hist√≥rico de Lembretes")
            df_lembretes = carregar_lembretes_aluno(aluno_id)
            if not df_lembretes.empty:
                st.dataframe(df_lembretes, use_container_width=True, hide_index=True)
            else:
                st.write("Nenhum lembrete para este aluno.")

        with tab_comportamento:
            st.write("###### Hist√≥rico de Comportamento")
            df_comportamento = carregar_comportamento_aluno(aluno_id)
            if not df_comportamento.empty:
                st.dataframe(df_comportamento, use_container_width=True, hide_index=True)
            else:
                st.write("Nenhum registo de comportamento para este aluno.")
def pagina_dashboard(categorias_config: Dict[str, Any]) -> None:
    """Renderiza o dashboard de an√°lise de faltas."""
    st.header("üìä Dashboard de An√°lise", divider="rainbow")
    
    df_faltas = carregar_todas_faltas()
    
    if df_faltas.empty:
        st.info("Nenhum dado de falta dispon√≠vel para an√°lise. O sistema pode estar vazio ou ainda n√£o h√° registros.")
        return
        
    st.subheader("üö® Alertas e Padr√µes")
    df_alertas = detectar_padroes_de_falta(df_faltas)
    
    if df_alertas.empty:
        st.success("‚úÖ Nenhum padr√£o preocupante detectado.")
    else:
        st.dataframe(df_alertas, use_container_width=True, hide_index=True)
    
    st.divider()
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìÖ Faltas por M√™s")
        if not df_faltas.empty:
            df_faltas['data'] = pd.to_datetime(df_faltas['data'])
            faltas_por_mes = df_faltas.set_index('data').groupby(pd.Grouper(freq='M')).size()
            faltas_por_mes.index = faltas_por_mes.index.strftime('%B %Y')
            st.bar_chart(faltas_por_mes)
        else:
            st.info("Nenhum dado de falta para mostrar a frequ√™ncia mensal.")
        
        st.subheader("üèÜ Alunos com Mais Presen√ßas")
        df_presentes = df_faltas[df_faltas['status'].str.upper() == 'P']
        if not df_presentes.empty:
            contagem_presencas = df_presentes['nome_aluno'].value_counts().reset_index()
            contagem_presencas.columns = ['Aluno', 'Total de Presen√ßas']
            st.dataframe(contagem_presencas.head(5), 
                        hide_index=True, 
                        column_config={"Aluno": "Aluno", "Total de Presen√ßas": "Presen√ßas"})
        else:
            st.info("Nenhum registro de presen√ßa encontrado.")
    
    with col2:
        st.subheader("üìå Motivos das Faltas")
        if 'justificativa' in df_faltas.columns and not df_faltas['justificativa'].empty:
            df_faltas_justificadas = df_faltas[df_faltas['status'].str.lower() == 'faltou'].dropna(subset=['justificativa'])
            
            if not df_faltas_justificadas.empty:
                df_faltas_justificadas['categoria'] = df_faltas_justificadas['justificativa'].apply(
                    lambda x: classificar_justificativa(x, categorias_config))
                
                contagem_categorias = df_faltas_justificadas['categoria'].value_counts()
                fig_pie = px.pie(
                    contagem_categorias, 
                    values=contagem_categorias.values,
                    names=contagem_categorias.index,
                    title="Distribui√ß√£o de Justificativas"
                )
                st.plotly_chart(fig_pie, use_container_width=True)
            else:
                st.info("Nenhuma justificativa v√°lida para faltas encontrada para classifica√ß√£o.")
        else:
            st.info("Nenhuma justificativa registrada.")

def pagina_relatorios() -> None:
    """Renderiza a p√°gina de relat√≥rios e ferramentas."""
    st.header("üìã Relat√≥rios e Ferramentas", divider="rainbow")
    
    df_total_faltas = carregar_todas_faltas()
    
    with st.expander("üìä Gerar Relat√≥rios", expanded=True):
        try:
            config_path = Path(__file__).resolve().parents[2] / "config.toml"
            config = toml.load(config_path)
            categorias = config.get("categorias", {})
            lista_categorias = [
                cat.replace("motivo_", "").replace("_", " ").title()
                for cat in categorias if isinstance(categorias.get(cat), list)
            ]
        except FileNotFoundError:
            lista_categorias = []
            st.warning("Arquivo config.toml n√£o encontrado para categoriza√ß√£o.")
        except Exception as e:
            lista_categorias = []
            st.error(f"Erro ao carregar categorias do config.toml: {e}")
        
        col1, col2 = st.columns(2)
        with col1:
            data_inicio = st.date_input("Data inicial:", value=datetime.today().replace(day=1))
        with col2:
            data_fim = st.date_input("Data final:", value=datetime.today())
        
        categorias_selecionadas = st.multiselect(
            "Filtrar por categoria de justificativa:",
            options=lista_categorias,
            default=[]
        )
        
        if st.button("üì• Gerar Relat√≥rio Completo (Excel)", type="primary"):
            with st.spinner("Gerando relat√≥rio..."):
                sucesso, resultado = gerar_relatorio_excel_completo(
                    data_inicio=data_inicio,
                    data_fim=data_fim,
                    categorias=categorias_selecionadas
                )
                
                if sucesso and isinstance(resultado, Path):
                    with open(resultado, "rb") as f:
                        st.download_button(
                            "‚¨áÔ∏è Baixar Relat√≥rio",
                            data=f,
                            file_name=resultado.name,
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                        )
                    st.success("Relat√≥rio gerado com sucesso!")
                else:
                    st.error(resultado)

    st.divider()
    
    with st.expander("üìà Visualiza√ß√µes Anal√≠ticas", expanded=True):
        tab1, tab2, tab3 = st.tabs(["Calend√°rio", "Ranking", "Top 10"])
        
        df_faltas = carregar_todas_faltas()

        with tab1:
            st.subheader("Calend√°rio de Faltas")
            fig_calendario = gerar_grafico_calendario(df_faltas)
            if fig_calendario:
                # Adicione a key aqui
                st.plotly_chart(fig_calendario, use_container_width=True, key="dash_calendario")
            else:
                st.info("Nenhum dado de falta dispon√≠vel para o calend√°rio.")
        
        
        with tab2:
            st.subheader("Ranking de Faltas")
            df_ranking = gerar_ranking_faltas(df_faltas)
            
            if not df_ranking.empty: # Verifica se est√° vazio, n√£o se √© None
                st.dataframe(df_ranking, use_container_width=True, hide_index=True)
            else:
                st.info("Nenhum dado dispon√≠vel para o ranking.")
        
        with tab3:
            st.subheader("Top 10 Alunos com Mais Faltas")
            fig_top10 = gerar_grafico_top_faltas(df_faltas)
            if fig_top10:
                # Adicione a key aqui
                st.plotly_chart(fig_top10, use_container_width=True, key="dash_top10")
            else:
                st.info("Nenhum dado dispon√≠vel para o gr√°fico de top 10.")